$colors: (
  'gray',
  'red',
  'pink',
  'yellow',
  'orange',
  'purple',
  'deepPurple',
  'indigo',
  'blue',
  'lightblue',
  'cyan',
  'teal',
  'green',
  'lightgreen',
  'lime',
  'brown'
);
$sizes: ('xs', 'sm', 'md', 'lg', 'xl');

@mixin bindSize {
  $num: -1;
  @each $size in $sizes {
    $num: $num + 1;

    $rem125: 0.125rem * $num;
    $rem375: 0.375rem * $num;

    $s: 0.75rem + $rem375;
    $s3: $s / 3;

    .button.#{$size} {
      height: calc($s + 0.625rem);
      width: calc($s + 0.625rem);

      & .bar {
        width: $s;
        height: calc($s / 12);

        &::before {
          top: -$s3;
        }
        &::after {
          top: $s3;
        }

        &[data-open='true'] {
          &::before {
            transform: translateY($s3) rotate(45deg);
          }
          &::after {
            transform: translateY(-$s3) rotate(-45deg);
          }
        }
      }
    }
  }
}

@include bindSize;

.button {
  border: none;
  padding: calc(0.625rem / 2);
  overflow: hidden;
  cursor: pointer;

  &.ghost {
    background-color: inherit;

    & .bar,
    & .bar::before,
    & .bar::after {
      background-color: var(--text-primary);
    }
  }

  &.solid {
    outline: 2px solid transparent;
    border-radius: 3px;
    background-color: var(--text-primary);

    & .bar,
    & .bar::before,
    & .bar::after {
      background-color: var(--background-default);
    }
  }
}

@each $color in $colors {
  $light: var(--#{$color}-600);
  $dark: var(--#{$color}-300);

  .button.#{$color}.ghost .bar {
    &,
    &::before,
    &::after {
      background-color: $light;
    }
  }

  .button.#{$color}.solid {
    background-color: $light;
  }

  html[data-theme='dark'] {
    .button.#{$color}.ghost .bar {
      &,
      &::before,
      &::after {
        background-color: $dark;
      }
    }

    .button.#{$color}.solid {
      background-color: $dark;
    }
  }
}

.bar {
  position: relative;
  transition-timing-function: ease;
  transition: ease all 0.3s;
  transition-property: background-color, transform;

  &::before,
  &::after {
    content: '';
    position: absolute;
    left: 0;
    width: inherit;
    height: inherit;
    transition: inherit;
    opacity: 1;
  }

  &[data-open='true'] {
    background-color: rgba(0, 0, 0, 0) !important;
  }
}
