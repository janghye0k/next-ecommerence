// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  pwd           String? 
  brithday      DateTime?
  tall          Int?
  weight        Int?
  role          Int @default(0)
  accounts      Account[]
  sessions      Session[]
  addresses     Address[] 
  likes         Like[]
  carts         Cart[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt() 
}

model VerificationToken {
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

model Address {
  id            Int       @default(autoincrement()) @id()
  name          String
  recipient     String
  phone         Int
  postCode      Int 
  addressBase   String 
  addressDetail String? 
  message       String?
  userId        String 
  orders         Order[]
  user          User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt() 
}

model Product {
  id          String @default(cuid()) @id
  thumbnail   String 
  images      String[]
  name        String
  description String?
  price       Float
  season      String[]
  fit         String[]
  elastic     String?
  opacity     String?
  show        Boolean @default(true)
  discounts   Discount[]
  likes       Like[]
  carts       Cart[]
  inventory   ProductInventory[]
  orders      OrderItem[]
  categoryId  Int 
  category    Category @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt() 
}

model ProductInventory {
  id          Int @default(autoincrement()) @id()
  productId   String 
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId     Int 
  color       Color @relation(fields: [colorId], references: [id])
  sizeId      Int 
  size        Size @relation(fields: [sizeId], references: [id])
  carts       Cart[]
  orders      OrderItem[]
  qty         Int @default(0)
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt() 
}

model Category {
  id          Int @default(autoincrement()) @id()
  fullName    String
  names       String[]
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Color {
  id          Int @default(autoincrement()) @id()
  name        String
  code        String
  products    ProductInventory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Size {
  id          Int @default(autoincrement()) @id()
  name        String
  value       Int
  products    ProductInventory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Discount {
  id          Int @default(autoincrement()) @id()
  name        String
  description String
  percent     Float
  products    Product[] 
  orders      OrderItem[]
  show        Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Like {
  id          Int @default(autoincrement()) @id()
  userId      String
  productId   String
  user        User @relation(fields: [userId] ,references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Cart {
  id                  Int @default(autoincrement()) @id()
  userId              String
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId           String
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productInventoryId  Int
  productInventory    ProductInventory @relation(fields: [productInventoryId], references: [id], onDelete: Cascade)
  qty                 Int @default(1)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
}


model Order {
  id          String @default(cuid()) @id()
  userId      String
  user        User @relation(fields: [userId], references: [id])
  items       OrderItem[]
  addressId   Int @unique()
  address     Address @relation(fields: [addressId], references: [id])
  paymentId   String? @unique()
  payment     Payment? 
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model OrderItem {
  id              String @default(cuid()) @id()
  orderId         String
  order           Order @relation(fields: [orderId], references: [id])
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  productInventoryId  Int
  productInventory    ProductInventory @relation(fields: [productInventoryId], references: [id])
  discountId      Int?
  discount        Discount? @relation(fields: [discountId], references: [id])
  qty             Int
  review          Review?
  deliveryStatus  Int @default(0)
  isRefund        Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
}

model Payment {
  id            String @default(cuid()) @id()
  orderId       String @unique()
  order         Order @relation(fields: [orderId], references: [id])
  order_name    String?
  method        String
  methodName    String
  card_name     String?
  card_no       String?
  receipt_url   String?
  purchasedAt   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
}

model Review {
  id          String @default(cuid()) @id()
  images      String[]
  score       Int
  content     String
  userId      String
  productId   String
  orderItemId String @unique()
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}
